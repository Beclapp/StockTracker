{"version":3,"sources":["StockItem.js","StockList.js","page2.js","App.js","index.js"],"names":["StockItem","props","increaseShare","setState","shares","state","addShare","data","removeShare","decreaseShare","deleteItem","window","confirm","deleteShare","List","ListItem","divider","ListItemText","style","color","this","primary","secondary","num","currentPrice","Math","round","ListItemSecondaryAction","onClick","React","Component","finnhub","require","api_key","ApiClient","instance","authentications","apiKey","finnhubClient","DefaultApi","stockdisplayed","staticlist","sum","index","roundTwo","determinePrice","current","open","StockList","lookupSymbol","fetch","currDisplay","then","json","res","count","alert","displayInfo","result","displaySymbol","description","err","symbol","name","quote","error","response","c","push","o","curr","handleChange","event","preventDefault","target","value","clearList","display","item","find","share","splice","indexOf","refreshList","forEach","newPrice","stock","type","onChange","map","App","page1","second","className","rootElement","document","getElementById","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.39273deb.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\r\n\r\n//Rounds Numbers up to two digits.\r\nfunction roundTwo(num) {\r\n  return Math.round(num * 100) / 100;\r\n}\r\n\r\nexport default class StockItem extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      shares: 1\r\n    };\r\n  }\r\n\r\n  //Adds a share.\r\n  increaseShare = () => {\r\n    this.setState({\r\n      shares: this.state.shares + 1\r\n    });\r\n    this.props.addShare(this.props.data);\r\n  };\r\n\r\n  //Removes a share by one.\r\n  removeShare = () => {\r\n    if (this.state.shares > 1) {\r\n      this.setState({\r\n        shares: this.state.shares - 1\r\n      });\r\n      this.props.decreaseShare(this.props.data);\r\n    }\r\n  };\r\n\r\n  deleteItem = () => {\r\n    if (\r\n      window.confirm(\"Are you sure you want to remove \" + this.props.data + \"?\")\r\n    ) {\r\n      this.props.deleteShare(this.props.data);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <List>\r\n        <ListItem divider={true}>\r\n          <ListItemText\r\n            style={{ color: this.props.color }}\r\n            primary={this.props.data}\r\n            secondary={\r\n              \"$ \" +\r\n              roundTwo(this.props.currentPrice * this.state.shares) +\r\n              \" - \" +\r\n              this.state.shares +\r\n              \" share(s)\"\r\n            }\r\n          />\r\n          <ListItemSecondaryAction>\r\n            <button onClick={this.increaseShare}>+</button>\r\n            <button onClick={this.removeShare}>-</button>\r\n            <button onClick={this.deleteItem}>Remove</button>\r\n          </ListItemSecondaryAction>\r\n        </ListItem>\r\n      </List>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport StockItem from \"./StockItem\";\r\n\r\nconst finnhub = require(\"finnhub\");\r\nconst api_key = finnhub.ApiClient.instance.authentications[\"api_key\"];\r\napi_key.apiKey = \"bvue7g748v6pkq83cj3g\";\r\nconst finnhubClient = new finnhub.DefaultApi();\r\n\r\n//Boolean on whether the current stock is displayed, enables portfolio info,\r\n//refresh button, and list to appear once at least a single stock is displayed.\r\nlet stockdisplayed = false;\r\n\r\n//The list that keeps track of all stock entries in the list.\r\nlet staticlist = [];\r\n\r\n//Sum of the total portfolio price\r\nlet sum = 0;\r\n\r\n//Lets each stock item keep track of its place on the list.\r\nlet index = 0;\r\n\r\n//Rounds Numbers up to two digits.\r\nfunction roundTwo(num) {\r\n  return Math.round(num * 100) / 100;\r\n}\r\n\r\n//Determines if the current price is higher than at the beginning of the day.\r\nfunction determinePrice(current, open) {\r\n  if (current >= open) {\r\n    return \"green\";\r\n  } else {\r\n    return \"red\";\r\n  }\r\n}\r\n\r\nexport default class StockList extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      currDisplay: \"\",\r\n      stock: \"\",\r\n      display: false\r\n    };\r\n  }\r\n  //Retrieves the symbol from the api using a search function.\r\n  lookupSymbol = () => {\r\n    //Prevents the screen from automatically refreshing.\r\n    //I don't know exactly what it does but my program breaks without it.\r\n    //event.preventDefault();\r\n    try {\r\n      fetch(\r\n        \"https://finnhub.io/api/v1/search?q=\" +\r\n          this.state.currDisplay +\r\n          \"&token=\" +\r\n          api_key.apiKey\r\n      )\r\n        .then((data) => data.json())\r\n        .then((res) => {\r\n          if (res.count === 0) {\r\n            alert(\"Error: Stock not found\");\r\n            this.setState({ currDisplay: \"\" });\r\n          } else {\r\n            this.displayInfo(\r\n              res.result[0].displaySymbol,\r\n              res.result[0].description\r\n            );\r\n          }\r\n        });\r\n    } catch (err) {\r\n      alert(\"HTTP Error\");\r\n      this.setState({ currDisplay: \"\" });\r\n    }\r\n  };\r\n\r\n  //Displays the Info using the symbol and the name, adds it to the list.\r\n  displayInfo = (symbol, name) => {\r\n    finnhubClient.quote(symbol, (error, data, response) => {\r\n      if (data === null) {\r\n        alert(\"Error finding stock\");\r\n        this.setState({ currDisplay: \"\" });\r\n        return;\r\n      }\r\n      stockdisplayed = true;\r\n      sum += data.c;\r\n      staticlist.push({\r\n        name: name,\r\n        symbol: symbol,\r\n        color: determinePrice(data.c, data.o),\r\n        curr: data.c,\r\n        shares: 1\r\n      });\r\n      index++;\r\n      this.setState({ currDisplay: \"\" });\r\n    });\r\n  };\r\n  //Updates the search box as the user types in a query.\r\n  handleChange = (event) => {\r\n\tevent.preventDefault();\r\n    this.setState({ currDisplay: event.target.value });\r\n  };\r\n\r\n  //Clears the list of all entries.\r\n  clearList = () => {\r\n    //event.preventDefault();\r\n    staticlist = [];\r\n    this.setState({ display: false });\r\n    sum = 0;\r\n    stockdisplayed = false;\r\n  };\r\n\r\n  //Adds a share to the list item.\r\n  addShare = (name) => {\r\n    let item = staticlist.find((share) => name === share.name);\r\n    sum += item.curr;\r\n    item.shares += 1;\r\n    this.setState({ currDisplay: \"\" });\r\n  };\r\n\r\n  //Removes a share from the list item.\r\n  removeShare = (name) => {\r\n    let item = staticlist.find((share) => name === share.name);\r\n    sum -= item.curr;\r\n    item.shares -= 1;\r\n    this.setState({ currDisplay: \"\" });\r\n  };\r\n\r\n  deleteShare = (name) => {\r\n    let item = staticlist.find((share) => name === share.name);\r\n    sum -= item.curr * item.shares;\r\n    staticlist.splice(staticlist.indexOf(item), 1);\r\n    this.setState({ currDisplay: \"\" });\r\n  };\r\n\r\n  //Updates every list item with the current price and color.\r\n  refreshList = () => {\r\n    sum = 0;\r\n    staticlist.forEach((item) => {\r\n      finnhubClient.quote(item.symbol, (error, data, response) => {\r\n        if (data !== null) {\r\n          let newPrice = roundTwo(data.c);\r\n          sum += newPrice * item.shares;\r\n          item.color = determinePrice(newPrice, data.o);\r\n          item.curr = newPrice;\r\n          this.setState({ currDisplay: \"\" });\r\n        }\r\n      });\r\n    });\r\n  };\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h2>Enter Stocks Below (Use Name):</h2>\r\n        <form>\r\n          <label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"name\"\r\n              value={this.state.currDisplay}\r\n              onChange={this.handleChange}\r\n              index={index}\r\n            />\r\n          </label>\r\n          <button onClick={this.lookupSymbol}>Submit</button>\r\n          <button onClick={this.clearList}>Clear</button>\r\n        </form>\r\n        <p>{stockdisplayed && \"Portfolio Value: $\" + roundTwo(sum)}</p>\r\n        <ul>\r\n          {staticlist.map((item) => (\r\n            <StockItem\r\n              data={item.name}\r\n              color={item.color}\r\n              currentPrice={item.curr}\r\n              addShare={this.addShare}\r\n              decreaseShare={this.removeShare}\r\n              deleteShare={this.deleteShare}\r\n            />\r\n          ))}\r\n        </ul>\r\n        {stockdisplayed && <button onClick={this.refreshList}>Refresh</button>}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport \"./styles.css\";\r\n\r\nexport default class App extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>test</h1>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\nimport \"./styles.css\";\nimport StockList from \"./StockList\";\nimport Page2 from \"./page2\";\n\nlet page1 = true;\nlet second = false;\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      display: \"\"\n    };\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Stock Displayer</h1>\n        <button\n          onClick={() => {\n            page1 = true;\n            second = false;\n            this.setState({ display: \"Page1\" });\n          }}\n        >\n          Page 1\n        </button>\n        <button\n          onClick={() => {\n            page1 = false;\n            second = true;\n            this.setState({ display: \"Page2\" });\n          }}\n        >\n          Page 2\n        </button>\n        {page1 && <StockList />}\n        {second && <Page2 />}\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}